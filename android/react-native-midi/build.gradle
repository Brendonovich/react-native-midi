apply plugin: "com.android.library"
apply plugin: "checkstyle"
apply plugin: "jacoco-android"

import com.android.build.OutputFile

/**
 * Set this to true to create two separate APKs instead of one:
 *   - An APK that only works on ARM devices
 *   - An APK that only works on x86 devices
 * The advantage is the size of the APK is reduced by about 4MB.
 * Upload all the APKs to the Play Store and people will download
 * the correct one based on the CPU architecture of their device.
 */
def enableSeparateBuildPerCPUArchitecture = false

/**
 * Run Proguard to shrink the Java bytecode in release builds.
 */
def enableProguardInReleaseBuilds = false

android {
    compileSdkVersion 23
    buildToolsVersion "23.0.1"

    defaultConfig {
        minSdkVersion 19
        targetSdkVersion 23
        versionCode 1
        versionName "1.0"
        ndk {
            abiFilters "armeabi-v7a", "x86"
        }
        // jackOptions {
        //     enabled true
        // }
    }
    splits {
        abi {
            reset()
            enable enableSeparateBuildPerCPUArchitecture
            universalApk false  // If true, also generate a universal APK
            include "armeabi-v7a", "x86"
        }
    }
    buildTypes {
        debug {
            testCoverageEnabled true
        }
        release {
            minifyEnabled enableProguardInReleaseBuilds
            proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
        }
    }

    lintOptions {
      textOutput "stdout"
      textReport true
      quiet false
      noLines false

      // okio-1.6.0 will cause an error like
      // "Invalid package reference in library; not included in Android: java.nio.file. Referenced from okio.Okio."
      // (See also: https://github.com/square/okio/issues/58 )
      ignore 'InvalidPackage'
    }
}

dependencies {
    compile fileTree(dir: "libs", include: ["*.jar"])
    compile "com.android.support:appcompat-v7:23.0.1"
    compile "com.facebook.react:react-native:+"  // From node_modules
}

// Run this once to be able to run the application with BUCK
// puts all compile dependencies into folder libs for BUCK to use
task copyDownloadableDepsToLibs(type: Copy) {
  from configurations.compile
  into 'libs'
}

dependencies {
    // check the latest release version with https://github.com/kshoji/javax.sound.midi-for-Android/releases/latest
    // compile 'jp.kshoji:javax-sound-midi:0.0.3:@aar'
    //compile 'com.github.motiz88:javax.sound.midi-for-Android:develop-SNAPSHOT'
    compile project(':javax.sound.midi-for-Android:javax.sound.midi')

    // check the latest release version with https://github.com/kshoji/USB-MIDI-Driver/releases/latest
    //compile 'jp.kshoji:midi-driver:0.1.4:@aar'
    compile project(':USB-MIDI-Driver:MIDIDriver')

    // check the latest release version with https://github.com/kshoji/BLE-MIDI-for-Android/releases/latest
    compile 'jp.kshoji:ble-midi:0.0.9:@aar'
}

task writeClasspath << {
    buildDir.mkdirs()
    new File(buildDir, "classpath.txt").text = configurations.compile.asPath + "\n"
}
